package org.unordered.list;

public class List<T> {

	private class Node<V> implements Comparable<V> {
		private V value;
		private Node<V> next;

		public V getValue() {
			return value;
		}

		public void setValue(V value) {
			this.value = value;
		}

		public Node<V> getNext() {
			return next;
		}

		public void setNext(Node<V> next) {
			this.next = next;
		}

		@Override
		public int compareTo(V o) {
			if (o.equals(this.value) || o == this.value) {
				return 0;
			} else {
				return 1;
			}
		}

		private Node<V> head = null;
		private Node<V> tail = null;
		private int size;

		public boolean add(V e) {
			try {
				Node<V> nd = new Node<V>();
				nd.setValue(e);
				if (head == null) {
					head = nd;
					tail = nd;
					size++;
				} else {
					Node<V> temp = head;
					while (temp.getNext() != null) {
						temp = temp.getNext();
					}
					temp.setNext(nd);
					tail = nd;
					size++;
				}
				return true;
			} catch (Exception ex) {
				return false;
			}
		}

		public int getSize() {
			return size;
		}

		public boolean search(V e) {
			try {
				int cnt = 0;
				if (head == null) {
					System.out.println("List is Empty");
				} else {
					Node<V> temp = head;
					while (temp != null) {
						if (temp.compareTo(e) == 0) {
							System.out.println("your search element is at position "+cnt);
							return true;
						}
						cnt++;
						temp = temp.getNext();
					}
					System.out.println("your search element is not in the list");
				}
				return false;
			} catch (Exception ex) {
				return false;
			}
		}

		public void traverse() {
			Node<V> temp = head;
			while (temp != null) {
				System.out.println(temp.getValue());
				temp = temp.getNext();
			}
		}
	}
}